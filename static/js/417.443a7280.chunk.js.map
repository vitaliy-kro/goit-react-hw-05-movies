{"version":3,"file":"static/js/417.443a7280.chunk.js","mappings":"2PAEaA,EAAQC,EAAAA,GAAAA,GAAH,2FAGC,qBAAGC,MAAkBC,MAAM,EAA3B,IAGNC,EAAYH,EAAAA,GAAAA,EAAH,gEACL,qBAAGC,MAAkBG,MAAMC,MAA3B,IACF,qBAAGJ,MAAkBK,UAAUC,CAA/B,IAGFC,EAAiBR,EAAAA,GAAAA,EAAH,6CACV,qBAAGC,MAAkBG,MAAMK,SAA3B,I,SCiCjB,EAzCa,WACX,OAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SACRE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBAEvB,IACEC,EAAAA,GAAAA,IAAA,6CAE0CL,EAF1C,oEAGI,CAAEM,OAAQH,EAAWG,SAEtBC,MAAK,SAAAC,GACJT,EAAUS,EAAEC,KAAKC,KAClB,GAGJ,CAFC,MAAOC,GACPC,QAAQC,IAAIF,EACb,CAED,OAAO,WACLR,EAAWW,OACZ,CACF,GAAE,CAACd,IAGJ,OACEF,IACE,SAACiB,EAAA,EAAD,CAAKC,GAAG,KAAKC,EAAE,IAAf,SACGnB,EAAOoB,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,aAAcC,EAAvB,EAAuBA,UAAWC,EAAlC,EAAkCA,GAAlC,OACV,UAACpC,EAAD,YACE,gBAAKqC,IAPS,kCAOcH,EAAcI,IAAG,gBAAWL,EAAX,QAC7C,UAACJ,EAAA,EAAD,CAAKU,GAAG,IAAR,WACE,SAACnC,EAAD,UAAY6B,KACZ,SAACxB,EAAD,UAAiB0B,SAJTC,EADF,KAYnB,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Actor = styled.li`\n  display: flex;\n  align-items: center;\n  margin-bottom: ${({ theme }) => theme.space[4]}px;\n`;\n\nexport const ActorName = styled.p`\n  font-family: ${({ theme }) => theme.fonts.roboto};\n  font-size: ${({ theme }) => theme.fontSizes.l};\n`;\n\nexport const ActorCharacter = styled.p`\n  font-family: ${({ theme }) => theme.fonts.monospace};\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Box } from '../Box';\nimport { ActorName, Actor, ActorCharacter } from './Cast.styled';\n\nconst Cast = () => {\n  const [actors, setActors] = useState(null);\n  const { movieId } = useParams();\n  useEffect(() => {\n    const controller = new AbortController();\n\n    try {\n      axios\n        .get(\n          `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=ffeb9f2f11028db54bd5076015c70d21&language=en-US`,\n          { signal: controller.signal }\n        )\n        .then(e => {\n          setActors(e.data.cast);\n        });\n    } catch (error) {\n      console.log(error);\n    }\n\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n  const imageDefaultUrl = 'https://image.tmdb.org/t/p/w200';\n\n  return (\n    actors && (\n      <Box as=\"ul\" p=\"4\">\n        {actors.map(({ name, profile_path, character, id }) => (\n          <Actor key={id}>\n            <img src={imageDefaultUrl + profile_path} alt={`actor ${name} `} />\n            <Box ml=\"4\">\n              <ActorName>{name}</ActorName>\n              <ActorCharacter>{character}</ActorCharacter>\n            </Box>\n          </Actor>\n        ))}\n      </Box>\n    )\n  );\n};\nexport default Cast;\n"],"names":["Actor","styled","theme","space","ActorName","fonts","roboto","fontSizes","l","ActorCharacter","monospace","useState","actors","setActors","movieId","useParams","useEffect","controller","AbortController","axios","signal","then","e","data","cast","error","console","log","abort","Box","as","p","map","name","profile_path","character","id","src","alt","ml"],"sourceRoot":""}